name: "e2e"

on:
  pull_request:
    paths-ignore:
      - "!**.md"
  push:
    branches:
      - "master"

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  FORCE_COLOR: true

jobs:
  marine:
    uses: ./.github/workflows/snapshot.yml

  sqlite:
    needs: marine
    uses: fluencelabs/sqlite/.github/workflows/build.yml@master

  sqlite-wasm:
    needs: sqlite
    uses: fluencelabs/sqlite-wasm-connector/.github/workflows/snapshot.yml@master

  sqlite-wasm-tests:
    name: "sqlite-wasm"
    needs: sqlite
    uses: fluencelabs/sqlite-wasm-connector/.github/workflows/tests.yml@master

  spell:
    needs: sqlite-wasm
    uses: fluencelabs/spell/.github/workflows/snapshot.yml@main
    with:
      cargo-dependencies: |
        [
          {
            "package": "marine-sqlite-connector",
            "version": "=${{ needs.sqlite-wasm.outputs.version }}",
            "registry": "fluence"
          }
        ]

  marine-rs-sdk-test:
    needs:
      - marine

    uses: fluencelabs/marine-rs-sdk-test/.github/workflows/tests.yml@master
    with:
      cargo-dependencies: |
        [
          {
            "package": "fluence-app-service",
            "version": "=${{ needs.marine.outputs.cargo-version }}",
            "registry": "fluence"
          },
          {
            "package": "fluence-app-service",
            "manifest": "crates/marine-test-macro-impl/Cargo.toml",
            "version": "=${{ needs.marine.outputs.cargo-version }}",
            "registry": "fluence"
          }
        ]

  aquavm:
    needs:
      - marine

    uses: fluencelabs/aquavm/.github/workflows/snapshot.yml@master
    with:
      cargo-dependencies: |
        [
          {
            "package": "marine-runtime",
            "manifest": "avm/server/Cargo.toml",
            "version": "=${{ needs.marine.outputs.cargo-version }}",
            "registry": "fluence"
          },
          {
            "package": "fluence-app-service",
            "manifest": "air/Cargo.toml",
            "version": "=${{ needs.marine.outputs.cargo-version }}",
            "registry": "fluence"
          }
        ]

  rust-peer:
    needs:
      - marine
      - aquavm
      - spell

    uses: fluencelabs/rust-peer/.github/workflows/snapshot.yml@master
    with:
      image-name: "docker.fluence.dev/marine"
      cargo-dependencies: |
        [
          {
            "package": "fluence-app-service",
            "version": "=${{ needs.marine.outputs.cargo-version }}",
            "registry": "fluence"
          },
          {
            "package": "avm-server",
            "version": "=${{ needs.aquavm.outputs.cargo-version }}",
            "registry": "fluence"
          },
          {
            "package": "air-interpreter-wasm",
            "version": "=${{ needs.aquavm.outputs.cargo-version }}",
            "registry": "fluence"
          },
          {
            "package": "fluence-spell-dtos",
            "version": "=${{ needs.spell.outputs.cargo-version }}",
            "registry": "fluence"
          },
          {
            "package": "fluence-spell-distro",
            "version": "=${{ needs.spell.outputs.cargo-version }}",
            "registry": "fluence"
          }
        ]

  rust-peer-tests:
    name: "rust-peer"
    needs:
      - marine
      - aquavm

    uses: fluencelabs/rust-peer/.github/workflows/tests.yml@master
    with:
      cargo-dependencies: |
        [
          {
            "package": "fluence-app-service",
            "version": "=${{ needs.marine.outputs.cargo-version }}",
            "registry": "fluence"
          },
          {
            "package": "avm-server",
            "version": "=${{ needs.aquavm.outputs.cargo-version }}",
            "registry": "fluence"
          },
          {
            "package": "air-interpreter-wasm",
            "version": "=${{ needs.aquavm.outputs.cargo-version }}",
            "registry": "fluence"
          }
        ]

  js-client-tests:
    name: "js-client"
    needs:
      - marine
      - aquavm
      - rust-peer

    uses: fluencelabs/js-client/.github/workflows/tests.yml@master
    with:
      marine-js-version: "${{ needs.marine.outputs.marine-js-version }}"
      avm-version: "${{ needs.aquavm.outputs.avm-version }}"
      rust-peer-image: "${{ needs.rust-peer.outputs.rust-peer-image }}"

  js-client:
    needs:
      - marine
      - aquavm

    uses: fluencelabs/js-client/.github/workflows/snapshot.yml@master
    with:
      marine-js-version: "${{ needs.marine.outputs.marine-js-version }}"
      avm-version: "${{ needs.aquavm.outputs.avm-version }}"

  spell-aqua-tests:
    name: "spell"
    needs:
      - rust-peer
    uses: fluencelabs/spell/.github/workflows/tests.yml@main
    with:
      rust-peer-image: "${{ needs.rust-peer.outputs.rust-peer-image }}"

  aqua-playground:
    needs:
      - js-client
      - rust-peer

    uses: fluencelabs/aqua-playground/.github/workflows/tests.yml@master
    with:
      js-client-snapshots: "${{ needs.js-client.outputs.js-client-snapshot }}"
      rust-peer-image: "${{ needs.rust-peer.outputs.rust-peer-image }}"

  registry:
    needs:
      - rust-peer
      - sqlite-wasm

    uses: fluencelabs/registry/.github/workflows/tests.yml@main
    with:
      rust-peer-image: "${{ needs.rust-peer.outputs.rust-peer-image }}"
      cargo-dependencies: |
        [
          {
            "package": "marine-sqlite-connector",
            "version": "=${{ needs.sqlite-wasm.outputs.version }}",
            "registry": "fluence"
          }
        ]

  fluence-cli:
    needs:
      - marine
      - rust-peer

    uses: fluencelabs/fluence-cli/.github/workflows/tests.yml@main
    with:
      marine-version: "${{ needs.marine.outputs.cargo-version }}"
      mrepl-version: "${{ needs.marine.outputs.cargo-version }}"
      rust-peer-image: "${{ needs.rust-peer.outputs.rust-peer-image }}"

  status:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - fluence-cli
      - registry
      - aqua-playground

    steps:
      - uses: lwhiteley/dependent-jobs-result-check@v1
        id: status
        with:
          statuses: failure,cancelled,skipped
          dependencies: ${{ toJSON(needs) }}

      - name: Log output
        run: |
          echo "statuses:" "${{ steps.status.outputs.statuses }}"
          echo "jobs:" "${{ steps.status.outputs.jobs }}"
          echo "found any?:" "${{ steps.status.outputs.found }}"

      - name: Fail run
        if: fromJSON(steps.status.outputs.found)
        run: exit 1
