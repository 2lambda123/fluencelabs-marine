name: "marine-e2e"

on:
  pull_request:
    # paths:
    #   - "marine/**"
    branches:
      - "master"

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  FORCE_COLOR: true

jobs:
  marine-rs-sdk-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout marine-rs-sdk-test
        uses: actions/checkout@v3
        with:
          repository: fluencelabs/marine-rs-sdk-test

      - name: Setup rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-wasi

      - name: Set fluence-app-service version
        run: >
          cargo add fluence-app-service \
            --git https://github.com/fluencelabs/marine \
            --branch ${{ github.head_ref }} \
            --features raw-module-api

      - run: cargo check

      - uses: actions/upload-artifact@v3
        with:
          name: marine-rs-sdk-test
          path: |
            .
            !.git
            !.cargo
            !target/
            !*.wasm
            !*.wat

  fluence-app-service:
    runs-on: ubuntu-latest

    needs:
      - marine-rs-sdk-test

    steps:
      - name: Checkout marine
        uses: actions/checkout@v3

      - name: Setup rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-wasi

      - name: Download marine-rs-sdk-test
        uses: actions/download-artifact@v3
        with:
          name: marine-rs-sdk-test
          path: external/marine-rs-sdk-test

      - name: Set marine-rs-sdk-test version
        run: >
          cargo add marine-rs-sdk-test \
            --path external/marine-rs-sdk-test

      - name: Set marine-runtime version
        run: >
          cargo add marine-runtime \
            --git https://github.com/fluencelabs/marine \
            --branch ${{ github.head_ref }}
        working-directory: crates/fluence-app-service

      - run: cargo check

      - uses: actions/upload-artifact@v3
        with:
          name: fluence-app-service
          path: |
            .
            !.git
            !.cargo
            !target/
            !*.wasm
            !*.wat

  avm-server:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout aquavm
        uses: actions/checkout@v3
        with:
          repository: fluencelabs/aquavm

      - name: Setup rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-wasi

      - name: Set marine-runtime version
        run: >
          cargo add marine-runtime \
            --git https://github.com/fluencelabs/marine \
            --branch ${{ github.head_ref }}
        working-directory: avm/server

      - run: cargo check

      - uses: actions/upload-artifact@v3
        with:
          name: avm-server
          path: |
            .
            !.git
            !.cargo
            !target/
            !*.wasm
            !*.wat

  # registry:
  #   name: "Run registry tests"
  #   runs-on: builder

  #   needs:
  #     - dependent

  #   steps:
  #     - name: Checkout registry
  #       uses: actions/checkout@v3
  #       with:
  #         repository: fluencelabs/registry

  #     - name: Checkout marine-rs-sdk-test
  #       uses: actions/checkout@v3
  #       with:
  #         repository: fluencelabs/marine-rs-sdk-test
  #         path: marine-rs-sdk-test

  #     - name: Setup rust toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: nightly
  #         target: wasm32-wasi
  #         components: clippy

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: fluence-app-service
  #         path: marine-rs-sdk-test/fluence-app-service

  #     - name: Set fluence-app-service path
  #       run: |
  #         cargo add \
  #           --path fluence-app-service/crates/fluence-app-service \
  #           --features raw-module-api \
  #           fluence-app-service
  #       working-directory: marine-rs-sdk-test

  #     - name: Set marine-rs-sdk-test path
  #       run: |
  #         cargo add \
  #           --path ../marine-rs-sdk-test \
  #           marine-rs-sdk-test
  #       working-directory: service

  #     - name: Build registry
  #       run: cargo clean; cargo build
  #       working-directory: service

  rust-peer:
    name: "Build rust-peer snapshot"
    runs-on: builder

    permissions:
      contents: read
      id-token: write

    needs:
      - avm-server
      - fluence-app-service

    steps:
      - name: Checkout rust-peer
        uses: actions/checkout@v3
        with:
          repository: fluencelabs/rust-peer
          ref: e2e-snapshot

      - name: Setup rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-wasi
          components: clippy

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: external

      - name: Use local dependencies
        run: |
          sed -i 's#\(fluence-app-service =\) .*#\1 { path = "external/fluence-app-service/crates/fluence-app-service" }#g' Cargo.toml
          sed -i 's#\(avm-server =\) .*#\1 { path = "external/avm-server/avm/server" }#g' Cargo.toml

      - run: cargo update

      - name: Run cargo build
        run: cargo build --release -p particle-node

      - name: Install cargo-nextest
        run: cargo install --locked cargo-nextest@0.9.22

      - name: Run cargo nextest
        run: cargo nextest run --release --all-features --no-fail-fast --retries 10 --test-threads 10

      - name: Import secrets
        uses: hashicorp/vault-action@v2.4.1
        with:
          url: https://vault.fluence.dev
          path: jwt/github
          role: ci
          method: jwt
          jwtGithubAudience: "https://github.com/fluencelabs"
          jwtTtl: 300
          secrets: |
            kv/docker-registry/basicauth/ci username | DOCKER_USERNAME ;
            kv/docker-registry/basicauth/ci password | DOCKER_PASSWORD

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.fluence.dev
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push snapshot
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          file: .github/snapshot/Dockerfile
          tags: |
            docker.fluence.dev/marine:${{ github.head_ref }}
          labels: |
            sha=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  aqua-playground:
    name: "Run aqua-playground tests"
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    needs:
      - rust-peer

    steps:
      - name: Import secrets
        uses: hashicorp/vault-action@v2.4.1
        with:
          url: https://vault.fluence.dev
          path: jwt/github
          role: ci
          method: jwt
          jwtGithubAudience: "https://github.com/fluencelabs"
          jwtTtl: 300
          secrets: |
            kv/docker-registry/basicauth/ci username | DOCKER_USERNAME ;
            kv/docker-registry/basicauth/ci password | DOCKER_PASSWORD

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.fluence.dev
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Checkout aqua-playground
        uses: actions/checkout@v3
        with:
          repository: fluencelabs/aqua-playground
          ref: marine-e2e

      - name: Setup docker-compose
        uses: KengoTODA/actions-setup-docker-compose@v1.0.9
        with:
          version: 'v2.10.0'

      - name: Run rust-peer
        uses: isbang/compose-action@v1.1.0
        with:
          compose-file: ".github/e2e/docker-compose.yml"
          down-flags: "--volumes"

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Prepare config
        run: cat .github/e2e/config.ts > src/config.ts

      - run: npm install
      - run: npm run build
      - run: npm run compile-aqua -- -c "UNIQUE_CONST = 1" -c "ANOTHER_CONST = \"ab\""
      - run: npm run test

  fluence-js:
    name: "Run fluence-js tests"
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    needs:
      - rust-peer

    env:
      CI: true
      RUST_PEER_IMAGE: docker.fluence.dev/marine:${{ github.head_ref }}

    steps:
      - name: Checkout fluence-js
        uses: actions/checkout@v3
        with:
          repository: fluencelabs/fluence-js

      - name: Import secrets
        uses: hashicorp/vault-action@v2.4.1
        with:
          url: https://vault.fluence.dev
          path: jwt/github
          role: ci
          method: jwt
          jwtGithubAudience: "https://github.com/fluencelabs"
          jwtTtl: 300
          secrets: |
            kv/docker-registry/basicauth/ci username | DOCKER_USERNAME ;
            kv/docker-registry/basicauth/ci password | DOCKER_PASSWORD

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: docker.fluence.dev
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Setup docker-compose
        uses: KengoTODA/actions-setup-docker-compose@v1.0.9
        with:
          version: 'v2.10.0'

      - name: Run rust-peer
        uses: isbang/compose-action@v1.1.0
        with:
          compose-file: ".github/e2e/docker-compose.yml"
          down-flags: "--volumes"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: pnpm

      - run: pnpm i
      - run: pnpm -r build
      - run: pnpm -r test
